Help on module neat_train:

NAME
    neat_train - Create agents with NEAT algorithm

DESCRIPTION
    Agents are trained in gym MineRLNavigateDense environment
    
    Created : 13/12/2019 by Guilhem Le Moigne
    Updated : 16/12/2019 by Guilhem Le Moigne
    Updated : 17/12/2019 by Guilhem Le Moigne
    Updated : 18/12/2019 by Guilhem Le Moigne
    Updated : 07/01/2020 by Guilhem Le Moigne

CLASSES
    builtins.object
        Fitness
    threading.Thread(builtins.object)
        MinerlEnv
    
    class Fitness(builtins.object)
     |  Fitness(envs)
     |  
     |  See fitness method
     |  
     |  ARGUMENTS :
     |  envs : list of training environments (gym format)
     |  
     |  METHODS:
     |  fitness
     |  
     |  Methods defined here:
     |  
     |  __init__(self, envs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  fitness(self, population, config)
     |      Assign each genome fitness
     |      
     |      Fitness is defined with the reward earned by the agent born from the genome in a MineRLNavigateDense environment
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MinerlEnv(threading.Thread)
     |  MinerlEnv(env_id)
     |  
     |  Gets a gym MineRLNavigateDense env on a separate thread for it to be used to train networks
     |  
     |  ARGUMENTS:
     |  env_id
     |  
     |  METHODS:
     |  reset
     |  call
     |  run
     |  
     |  Method resolution order:
     |      MinerlEnv
     |      threading.Thread
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, env_id)
     |      This constructor should always be called with keyword arguments. Arguments are:
     |      
     |      *group* should be None; reserved for future extension when a ThreadGroup
     |      class is implemented.
     |      
     |      *target* is the callable object to be invoked by the run()
     |      method. Defaults to None, meaning nothing is called.
     |      
     |      *name* is the thread name. By default, a unique name is constructed of
     |      the form "Thread-N" where N is a small decimal number.
     |      
     |      *args* is the argument tuple for the target invocation. Defaults to ().
     |      
     |      *kwargs* is a dictionary of keyword arguments for the target
     |      invocation. Defaults to {}.
     |      
     |      If a subclass overrides the constructor, it must make sure to invoke
     |      the base class constructor (Thread.__init__()) before doing anything
     |      else to the thread.
     |  
     |  call(self, genome_id, net_activate, training_time)
     |      Method to call to start training a network
     |  
     |  reset(self, last_genome_trained=None)
     |      Reset genome linked parameters, reset env and store last genome data
     |  
     |  run(self)
     |      Open a gym MineRLNavigateDense env to train networks when self.call is called
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  getName(self)
     |  
     |  isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method is deprecated, use is_alive() instead.
     |  
     |  isDaemon(self)
     |  
     |  is_alive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  join(self, timeout=None)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      is_alive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  setDaemon(self, daemonic)
     |  
     |  setName(self, name)
     |  
     |  start(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from threading.Thread:
     |  
     |  ident
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  native_id
     |      Native integral thread ID of this thread, or None if it has not been started.
     |      
     |      This is a non-negative integer. See the get_native_id() function.
     |      This represents the Thread ID as reported by the kernel.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  daemon
     |      A boolean value indicating whether this thread is a daemon thread.
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when only daemon threads are left.
     |  
     |  name
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.

FUNCTIONS
    TRAINING_TIME_FUNC lambda generation
        #sigmoid centered on 15 generations that converge towards 1 min
    
    main()
    
    set_actions(noop, output)
        Make actions from output
    
    set_inputs(compass, reward, pov)
        Format inputs
    
    standardize(v, scope, offset=0)
        Puts values that are between 0 and scope between 0 and 1

FILE
    /Users/guilhem/Documents/MineRL/master/neat_train.py


